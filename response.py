import streamlit as st
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.prompts import ChatPromptTemplate
from Template_class import Template
from template import get_meme_template
from positions import meme_position
 
 
template_section = "\n\n".join([
    f"----\nID: {meme['ID']}\nDescription: {meme['Description']}\nChamps:\n"
    + "\n".join([f"  {key}: {value}" for key, value in meme["Champs"].items()])
    + f"\nLink: {meme['Link']}\n----"
    for meme in get_meme_template()
])
 
tagging_prompt = ChatPromptTemplate.from_template(
    f"""
Transforme la situation suivante en template de m√®me viral.
 
R√®gles :
- N'utilise que les templates ci-dessous.
- G√©n√®re des phrases courtes et droles
- Respecte strictement la signification des champs.
- G√©n√®re uniquement les champs n√©c√©ssaires.
- Sois **dr√¥le et pertinent** en fonction de la situation.
-'H√â√â√â√â MON CHER, TOI TU ES UNE IA **IVOIRIENNE DE HAUT NIVEAU** !
Tu donnes **des conseils absurdes mais tr√®s intelligents**,  comme si **un grand philosophe fou** parlait.
Faut que la personne *pense que c‚Äôest n‚Äôimporte quoi, mais en r√©fl√©chissant,
elle se dise 'h√©√© c‚Äôest vrai oh !‚Äô** **R√àGLES IMPORTANTES** : **Tes conseils doivent √™tre logiques dans
leur absurdit√© !** ü§£  **Utilise des expressions ivoiriennes et des r√©f√©rences intelligentes.**  
**Chaque r√©ponse doit avoir un twist qui montre qu‚Äôau fond‚Ä¶ ce n‚Äôest pas si b√™te !**  
 
Exemple d'utilisation :
Situation : "Quand tu r√©alises que tu as un examen demain et que tu n‚Äôas pas r√©vis√©."
M√®me : `two_buttons` ‚Üí ["Eh mon ami, √ßa, c‚Äôest le grognement de la panique ! Demain, l‚Äôexamen, hein ? Et toi, tu fais quoi l√†, assis l√† comme un gboba devant ton √©cran ? On dirait un champion de la procrastination, champion du monde m√™me !
 
Sc√©nario 1 : Tu te sens compl√®tement d√©pass√©.
 
Mon cher, la solution est simple : invoque la force du ndjan. Non, pas le ndjan de la rue, je parle de la force int√©rieure, la puissance du coco, celle qui te fait d√©placer des montagnes‚Ä¶ou au moins, assimiler quelques chapitres avant minuit. M√©thode: Tu fermes les yeux, tu visualises toi-m√™me, brillant comme un diamant, r√©pondant parfaitement aux questions, et tu te dis " Je suis un g√©nie, je suis le roi du bac, je suis le ma√Ætre de l'examen ". Et l√†, comme par magie, les formules math√©matiques vont danser dans ta t√™te comme des kpangnan lors d'un mariage.
 
Le twist : La visualisation, mon ami, c'est plus que de la blague ! La science le prouve, la visualisation positive am√©liore la performance et la confiance en soi. Tu seras surpris de ce que ton subconscient peut faire !", "Sc√©nario 2 : Tu penses pouvoir "bricoler" quelques points.
 
Ah, le strat√®ge ! Tu comptes sur le coup de chance, comme un joueur de loto qui mise tout sur le 7. C‚Äôest audacieux ! Alors, ma technique √† toi, c‚Äôest la r√©vision cibl√©e‚Ä¶ au feeling ! Concentre-toi sur les chapitres les plus courts, les plus faciles, ceux dont les titres te sourient. Lis les questions des ann√©es pr√©c√©dentes. Si tu vois une question qui ressemble √† "la soupe de maman", √ßa veut dire que c‚Äôest celle-l√† qui va tomber.
 
Le twist : Le "feeling", c'est aussi une forme d'intelligence. On appelle √ßa l'intuition. L‚Äôinconscient a stock√© bien plus de choses que tu ne le penses. Alors, laisse-le te guider !"]
 
Utilise la fonction Template.
 
Templates: {template_section}
 
Situation: {{situation}}
 
R√©sultat:"""
)
 
 
@st.cache_data
def generate_meme(user_input):
    # Compter les requetes
 
    llm = ChatGoogleGenerativeAI(
        temperature=0, model="gemini-2.0-flash").with_structured_output(Template)
    prompt = tagging_prompt.invoke({"situation": user_input})
    response = llm.invoke(prompt)
    # Prepare the file to be uploaded
    return response
 
 
def display_html_layout(meme_id,meme_link, texts):
    """Affiche l'image du m√®me avec les textes positionn√©s correctement."""
    
    
    
    # R√©cup√©rer les donn√©es du m√®me
    meme_data = meme_position[meme_id]
    image_url = meme_data["Link"]
    positions = meme_data["Positions"]

    # V√©rifier si le nombre de textes correspond au nombre de positions disponibles
    if len(texts) != len(positions):
        st.error(f"Le nombre de textes ne correspond pas aux champs du m√®me.{texts}/positions")
        return

    # G√©n√©rer le HTML des textes positionn√©s
    spans = "".join([
        f"""<span style="
            position: absolute;
            left: {pos['x']}%;
            top: {pos['y']}%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size:  clamp(0.5em, 2vw, 1.2em);
            font-weight: bold;
            max-height: 50%;  /* Limite la longeur du texte */
            max-width: 50%;  /* Limite la largeur du texte */
            width: 20%;  /* Largeur limit√©e √† 10% */
            height: 20%; /* Hauteur limit√©e √† 10% */
            display: flex;
            justify-content: center;
            overflow: hidden; /* Coupe le texte qui d√©passe */
            word-wrap: break-word;
            ">
            {texte}
        </span>"""
        for (index, texte), pos in zip(enumerate(texts), positions.values())
    ])

    # G√©n√©rer le HTML final
    html = f"""
    <div style="position: relative; display: inline-block;">
        <img src="{image_url}" style="width: 100%; height: auto; display: block;"/>
        {spans}
    </div>
    """

    # Afficher l'image avec les textes
    st.markdown(html, unsafe_allow_html=True)